openapi: 3.0.0
info:
  title: Post Management API
  version: 1.0.0
  description: API for creating, retrieving, deleting, and voting on posts.

servers:
  - url: http://localhost:4000/api/posts
    description: Local server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Post:
      type: object
      required:
        - title
        - text
        - user_id
      properties:
        id:
          type: string
          description: The auto-generated id of the post
        title:
          type: string
          description: The title of the post
        text:
          type: string
          description: The text of the post
        user_id:
          type: string
          description: The id of the user who created the post
        user_username:
          type: string
          description: The username of the user who created the post
        likes:
          type: array
          items:
            type: string
          description: List of usernames who liked the post
        dislikes:
          type: array
          items:
            type: string
          description: List of usernames who disliked the post
        createdAt:
          type: string
          format: date-time
          description: The creation date of the post
        updatedAt:
          type: string
          format: date-time
          description: The last update date of the post

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFoundError:
      description: Post not found
    BadRequestError:
      description: Bad request

security:
  - BearerAuth: []

paths:
  /:
    get:
      summary: Get all posts
      tags: [Posts]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new post
      tags: [Posts]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                text:
                  type: string
              required:
                - title
                - text
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{id}:
    get:
      summary: Get a single post
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Post data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Delete a post
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to delete
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{id}/upvote:
    patch:
      summary: Upvote a post
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to upvote
          schema:
            type: string
      responses:
        '200':
          description: Post upvoted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /{id}/downvote:
    patch:
      summary: Downvote a post
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to downvote
          schema:
            type: string
      responses:
        '200':
          description: Post downvoted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
