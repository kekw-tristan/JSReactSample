openapi: 3.0.0
info:
  title: User Authentication and Management API
  version: 1.0.0
  description: API for user signup, login, retrieval, and deletion.

servers:
  - url: http://localhost:5000/api/users
    description: Local server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        id:
          type: string
          description: The auto-generated id of the user
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user
        createdAt:
          type: string
          format: date-time
          description: The creation date of the user
        updatedAt:
          type: string
          format: date-time
          description: The last update date of the user

    UserResponse:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        token:
          type: string
          description: JWT token

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFoundError:
      description: User not found
    BadRequestError:
      description: Bad request

security:
  - BearerAuth: []

paths:
  /:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /signup:
    post:
      summary: Signup a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /login:
    post:
      summary: Login a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /{id}:
    get:
      summary: Get a single user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete a user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
